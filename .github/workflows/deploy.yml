name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        # 코드 저장소를 체크아웃함

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
        # Amazon Corretto JDK 17을 설정함

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        # Gradle wrapper 파일에 실행 권한을 부여함

      - name: Build with Gradle
        run: ./gradlew clean build
        # Gradle을 사용하여 프로젝트를 빌드

      - name: List build directory
        run: ls -al build/libs

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build/libs/kkangtong-0.0.1-SNAPSHOT.jar
        # 빌드된 JAR 파일을 아티팩트로 업로드함

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
        # 이전 빌드 단계에서 업로드된 아티팩트를 다운로드함

      - name: List current directory
        run: ls -al
        # 현재 디렉토리의 파일 목록을 출력함

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        # SSH 키를 설정함 - GitHub Secrets에 저장된 EC2_KEY를 사용하여 id_rsa 파일을 생성하고 권한을 설정함

      - name: Add EC2 host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        # EC2 인스턴스의 호스트 키를 known_hosts 파일에 추가

      - name: Verify SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} echo "SSH connection successful"
        # SSH 연결을 확인함 -> 성공 메시지를 출력

      - name: Copy JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa kkangtong-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/kkangtong-0.0.1-SNAPSHOT.jar
        # 빌드된 JAR 파일을 SCP를 사용하여 EC2 인스턴스로 복사함

      - name: SSH and Run JAR
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            nohup java -jar /home/${{ secrets.EC2_USER }}/kkangtong-0.0.1-SNAPSHOT.jar > /home/${{ secrets.EC2_USER }}/kkangtong.log 2>&1 &
          EOF
        # SSH를 통해 EC2 인스턴스에 접속하고 JAR 파일을 백그라운드에서 실행